.#{$prefix}spinner {
	--#{$prefix}spinner-vertical-align: #{$spinner-vertical-align};
	@include flex-center();

	> div {
		animation-iteration-count: infinite;
		animation-name: var(--#{$prefix}spinner-animation-name);
		animation-timing-function: linear;
		border: var(--#{$prefix}spinner-border-width) solid var(--#{$prefix}spinner-color);
		height: var(--#{$prefix}spinner-width);
		vertical-align: var(--#{$prefix}spinner-vertical-align);
		width: var(--#{$prefix}spinner-width);
	}

	&--fixed {
		@include position-center(fixed);
	}

	&--absolute {
		@include position-center(absolute);
	}

	&--circle {
		--#{$prefix}spinner-animation-name: #{$spinner-animation-name};

		border-radius: 50%;
		border-right-color: transparent !important;
	}
}

@mixin spinner-size($size) {
	@if $size == 'sm' {
		--#{$prefix}spinner-width: #{$spinner-width-sm};
		--#{$prefix}spinner-height: #{$spinner-height-sm};
		--#{$prefix}spinner-border-width: #{$spinner-border-width-sm};
	} @else if $size == 'base' {
		--#{$prefix}spinner-width: #{$spinner-width-base};
		--#{$prefix}spinner-height: #{$spinner-height-base};
		--#{$prefix}spinner-border-width: #{$spinner-border-width-base};
	} @else if $size == 'lg' {
		--#{$prefix}spinner-width: #{$spinner-width-lg};
		--#{$prefix}spinner-height: #{$spinner-height-lg};
		--#{$prefix}spinner-border-width: #{$spinner-border-width-lg};
	}
}

@each $size in $spinner-sizes {
	.#{$prefix}spinner--size-#{$size} {
		@include spinner-size($size);
	}
}

@each $color, $value in $spinner-colors {
	.#{$prefix}spinner--color-#{$color} {
		--#{$prefix}spinner-color: #{$value};
	}
}

@keyframes spinner-circle {
	from {
		transform: rotate(0deg);
	}

	to {
		transform: rotate(360deg);
	}
}
